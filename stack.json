{
  "Parameters": {
    "DBUser": {
      "Description": "Application database user",
      "Type": "String",
      "MinLength": 4,
      "MaxLength": 16,
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPass": {
      "Description": "The database admin account password",
      "Type": "String",
      "MinLength": 8,
      "MaxLength": 41,
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters"
    }
  },
  "Resources": {
    "AppNode": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",
        "ImageId": "ami-cd0f5cb6",
        "KeyName": "531",
        "SecurityGroups": [
          {
            "Ref": "AppNodeSG"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash",
                "apt-get update -qq",
                "apt-get install -y apt-transport-https ca-certificates",
                " apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D",
                "echo \"deb https://apt.dockerproject.org/repo ubuntu-xenial main\" | tee /etc/apt/sources.list.d/docker.list\"",
                "apt/sources.list.d/docker.list",
                "apt-get update -qq",
                "apt-get purge lxc-docker || true",
                "apt-get -y install linux-image-extra-$(uname -r) linux-image-extra-virtual",
                "apt-get -y install docker-engine",
                "usermod -aG docker ubuntu",
                "mkdir -p /etc/systemd/system/docker.service.d",
                "printf \"[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\n\" >>  /etc/systemd/system/docker.service.d/docker.conf",
                "systemctl daemon-reload",
                "systemctl restart docker"
              ]
            ]
          }
        }
      }
    },
    "AppNodeSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "for the app nodes that allow ssh, http and docker ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2375",
            "ToPort": "2375",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DatabaseInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "five_three_one",
        "DBInstanceClass": "db.t2.micro",
        "Engine": "postgres",
        "EngineVersion": "9.6.3",
        "MasterUsername": {
          "Ref": "DBUser"
        },
        "MasterUserPassword": {
          "Ref": "DBPass"
        },
        "AllocatedStorage": "5"
      }
    },
    "DatabaseSG": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "Security Group for RDS public access",
        "DBSecurityGroupIngress": [
          {
            "CIDRIP": "0.0.0.0/0"
          }
        ]
      }
    }
  }
}